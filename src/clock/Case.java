/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clock;

import java.util.Scanner;
import math.geom2d.Point2D;

/**
 * The Case application <b>JFrame</b>-derived class is the
 * container for the (<b>JPanel</b>-derived)<b>Face</b>
 * object. A clock face is presented. The "seconds" hand sweeps
 * around from 0 seconds to 59 seconds. If there is an object
 * "stuck" to the clock face, it is detected and added to a list.
 * The application's purpose is to test the angular line ("seconds"
 * hand) and circle (obstruction) collision detection framework
 * from Kodicek and Flynt's <i>"Mathematics and Physics for Game
 * Programmers"</i> (2nd ed.) book.
 */
public class Case extends javax.swing.JFrame {
    // create a global constant to hold the game's frame rate
    private static final int DEFAULT_FPS = 60;

    // the maximum time between frame renders, sleep fills in the gap on very fast buffer flips
    private static long period;
    
    // the angular velocity of the "seconds" hand (only static variables can be referenced inside
    // the main() method
    private static double angularVelocityDegrees;

    // the starting angle with respect to "north" or the "12-noon" position of the "seconds" hand,
    // in units of degrees.
    private static double startAngleDegrees;

    // the radius of the ball the "seconds" hand will try to collide with.
    private static int ballRadius;
    
    // the center of the ball the "seconds" hand will try to collide with (if the ball
    // happens to be within the top-right quadrant of the "clock face," we'll know!)
    private static Point2D ballCenter;

    /**
     * Creates new form Clock.
     */
    public Case() {
        initComponents();
    }


    /**
     * This method handles the event fired on a "resumption" of window activity
     * @param e a "window active with mouse-click or action" event delegate
     */
    public void windowActivated(java.awt.event.WindowEvent e) {
        // when the window is clicked into or otherwise "lit"... call the super's resumeGame() method
        ((Face)face).resumeGame();  // recast THIS object as a Face (JPanel) object (THIS is a Case object!)
    }


    /**
     * this method responds to activity moving away from the Case JFrame ("the JPanel object face is
     * re-cast as has lost focus)
     * @param e an event delegate
     */
    public void windowDeactivated(java.awt.event.WindowEvent e) {
        // when a window is deactivated...
        ((Face)face).pauseGame();
    }


    /**
     * This method handles the window being restored from the
     * Windows Taskbar.
     * @param e an event delegate fired by the JPanel-derived
     * Face class
     */
    public void windowDeiconifed(java.awt.event.WindowEvent e) {
        ((Face)face).resumeGame();
    }

    /**
     * This method handles a minimized Case application by calling
     * the GamePanel method pauseGame();
     * @param e AWT Event delegate
     */
    public void windowIconified(java.awt.event.WindowEvent e) {
        ((Face)face).pauseGame();
    }
    
    
    /**
     * If the AWT Window container is being closed....
     * @param e AWT event delegate
     */
    public void WindowClosing(java.awt.event.WindowEvent e) {
        // stop the animation loop from running by lowering the GamePanel-derived Face class's
        // "running" flag and display a Game Over message and finalize leaderboards, etc
        ((Face)face).stopGame();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        face = new clock.Face(this, period*1000000L, angularVelocityDegrees, startAngleDegrees, ballCenter, ballRadius);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Clock");
        setBackground(new java.awt.Color(55, 55, 55));

        face.setPreferredSize(new java.awt.Dimension(812, 601));

        javax.swing.GroupLayout faceLayout = new javax.swing.GroupLayout(face);
        face.setLayout(faceLayout);
        faceLayout.setHorizontalGroup(
            faceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 824, Short.MAX_VALUE)
        );
        faceLayout.setVerticalGroup(
            faceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 601, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(face, javax.swing.GroupLayout.DEFAULT_SIZE, 824, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(face, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Hold the global (class) variable's value in fps so that we can change it if the player
        // has run <i>Case</i> from the comand line with parameters
        int fps = DEFAULT_FPS;
        
        int x;  // The ball center's x-ordinate
        int y;  // The ball center's y-ordinate
        
        angularVelocityDegrees = 0.0F;
        startAngleDegrees = 0.0F;
        
        Scanner input = new Scanner(System.in);
        
        // get the "seconds" hand's angular velocity, the initial angle (in degrees) of
        // the "seconds" hand, and the position in the game window of a possibly-colliding
        // ball.
        System.out.print("Angular velocity (degrees per second): ");
        angularVelocityDegrees = input.nextDouble(); // read first number from user
        
        // ask the user for the initial angle (in degrees) from "clock north" or "clock noon"
        // of the "seconds" hand
        System.out.print("Initial angle of the \"seconds\" hand (degrees): ");
        startAngleDegrees = input.nextDouble();
        
        System.out.print("Ball position x: ");
        x = input.nextInt();
        
        System.out.print("Ball position y: ");
        y = input.nextInt();
        
        System.out.print("Ball radius (pixels): ");
        ballRadius = input.nextInt();
        
        ballCenter = new Point2D(x, y);

        // look in the "pot" to see if we've been fed a value for the frames-per-second
        if (args.length != 0) {
            fps = Integer.parseInt(args[1]);
        }

        // for 60 frames-per-second, we have 1000/60 frames-per-millisecond! So instead of period being
        // in seconds (1/fps) we have the period in units of ms (1000 * (1/fps)) at 60 frames-per-second
        // we have 1000/60 milliseconds between updates (which is show as 16ms (rounded down from 16.667 ms)!
        // nice to have an int to work with!))
        period = (long)1000/fps;

        // set the Nimbus look and feel
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Case.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Case.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Case.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Case.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // create and display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // make the current JFrame object the focus for execution
                new Case().setVisible(true);
            }
        });
    } // end main()

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel face;
    // End of variables declaration//GEN-END:variables
}
